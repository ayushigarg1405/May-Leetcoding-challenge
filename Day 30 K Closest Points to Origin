/*
Question:

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].

Solution Approach:

Create a priority queue that will store minimum K distance points.

Solution:
*/
class Solution {
public:
    int dist( vector<int> &point ) {
        return point[0]*point[0] + point[1]*point[1];    
    }
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        typedef pair<int, int> pi;
        
        int distance;
        priority_queue< pi > maxHeap; // <distance, index> pair
        for( int i=0; i < points.size(); i++ ) {
            distance = dist( points[i] );
            if( maxHeap.size() < K )
                maxHeap.push( { distance, i } );
            else if( distance < maxHeap.top().first ) {
                    maxHeap.push( { distance, i } );
                    maxHeap.pop();
            }
        }
        
        vector<vector<int>> result;
        while( !maxHeap.empty() ) {
            result.push_back( points[ maxHeap.top().second ] );
            maxHeap.pop();
        }
        return result;
    }
};
